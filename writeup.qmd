---
title: "Computing Assignment: Geo-data and Methods in R"
format: 
  html:
    embed-resources: true
    html-math-method: katex
execute: 
  warning: false
editor: source
bibliography: references.bib
---

```{r}
#| label: setup
#| output: false

# Load packages
library(here)
library(dismo)
library(rworldmap)
library(sf)
library(geodata)
library(tidyverse)
library(kableExtra)
library(gridExtra)
library(cols4all)
  
# Load world map
wrld_simpl <- getMap(resolution = "coarse")
```

#### Question 1 - Species 1 Distribution Modelling

**Run linear models to predict the present-day distribution of species 1 using climate variables and use them to present a map of its current distribution. Which set of climatic variables best explain the current distribution of the species?**

```{r}
#| label: prepDataFunction
#| output: false

#' Prep GBIF data Function 
#' 
#' This function downloads the GBIF data for a species and prepares it for 
#' analysis through general linear models. It saves the variables needed
#' for the gm model as a list to be used later.
#'  
#' @param genus The genus of the species of interest, non-capitalised
#' @param species The species name of the species of interest, non-capitalised 
#' @param rawFilename The name of the RDS file to store the raw GBIF data
#' @param processedFilename The name of the csv file to store the cleaned data in
#' 
#' @return A list containing the parameters needed for further analysis 
#' 
#' @examples
#' prepData(genus = "atelopus",
#'          species = "zeteki",
#'          rawFilename = "atelopus.gbif.rds",
#'          processedFilename = "atelopus.csv")

prepData <- function(genus, species, rawFilename, processedFilename) {
  
  ### Downloading the data
  
  # Checks if the species data is already downloaded 
  if (!file.exists(here("data", "raw", rawFilename))) {
    # If not already downloaded, species data is downloaded from GBIF
    species.gbif <- gbif(genus, species, geo = TRUE)
    # The data is saved locally so it doesn't have to be downloaded again
    saveRDS(species.gbif, here("data", "raw", rawFilename))
  } else {
    # If the data is already downloaded the file is read
    species.gbif <- readRDS(here("data", "raw", rawFilename))
  }
  
  
  ### Cleaning the data 
  
  species.coords <- species.gbif %>% 
    # Pull out the lat and lon columns
    transmute(lon, lat) %>% 
    # Remove empty rows 
    na.omit() %>% 
    # Ensure it's set to be a data frame
    as.data.frame()
  
  
  ### Remove the ocean areas from the map 
  
  # Get the map
  wrld_simpl <- getMap(resolution = "coarse")
  
  # Download ocean data
  ocean_data_dir <- here("data", "raw", "ocean")
  if (!dir.exists(ocean_data_dir)) dir.create(ocean_data_dir)
  URL <- "https://naturalearth.s3.amazonaws.com/110m_physical/ne_110m_ocean.zip"
  zip_file <- file.path(ocean_data_dir, basename(URL))
  if (!file.exists(zip_file)) {
    download.file(URL, zip_file)
  }
  
  # Unzip to ocean data directory and read shapefile
  files <- unzip(zip_file, exdir = ocean_data_dir)
  oceans <- read_sf(grep("shp$", files, value = TRUE))
  
  # Convert coordinates to a spatial features (sf) object for GIS operations
  species.coords <- st_as_sf(species.coords, coords = c("lon", "lat"))
  # Set the coordinate reference system (CRS) to match the oceans data
  st_crs(species.coords) <- st_crs(oceans)
  sf_use_s2(FALSE)  # Disable spherical geometry
  
  # Find where out points intersect with the ocean
  tmp <- sapply(st_intersects(species.coords, oceans), function(z) if (length(z) == 0) NA_integer_ else z[1])
  
  # Remove points that intersect with the ocean and convert back to table of coordinates
  if (sum(!is.na(tmp)) > 0) {
    species.coords <- data.frame(st_coordinates(species.coords[is.na(tmp), ]))
  } else {
    species.coords <- data.frame(st_coordinates(species.coords))
  }
  colnames(species.coords) <- c("lon", "lat")

  
  ### Extract climatic values for locations occupied by the species 
  
  # Download bioclimatic data from the worldclim database and convert to Raster format
  bio.data <- worldclim_global(var = "bio", res = 10, path = here("data", "raw"))
  names(bio.data) <- paste0("bio", 1:19)
  
  # Extracting bioclimatic data for the focal localities where species is found
  bio.values <- terra::extract(bio.data, species.coords)[, -1]
  rownames(bio.values) <- rownames(species.coords)
  
  # Append to lat long, remove rows with missing data, and save to file for future use
  species.data <- cbind(species.coords, bio.values)
  write.csv(species.data, file = here("data", "processed", processedFilename), row.names = FALSE)
  
  
  ### Generate random background points for comparison in model 
  
  # Define study extent based on species occurrence data (with some buffer around it)
  e <- extent(
    min(species.coords$lon) - 5,
    max(species.coords$lon) + 5,
    min(species.coords$lat) - 5,
    max(species.coords$lat) + 5
  )
  
  # Create a mask from the world map for the study region
  mask <- rasterize(wrld_simpl, raster(e, res = 0.5))
  
  # Generate 500 random background points within the study region
  bg <- randomPoints(mask, 500, ext = e)
  colnames(bg) <- c("lon", "lat")
  
  # Crop the bio.data to just keep values for this region
  bio.data <- crop(bio.data, e)
  
  
  ### Combine the presence data and the background data in one data frame 
  
  train <- rbind(species.coords, bg)
  # Create a vector of 1s and 0s to indicate presence/absence
  pb_train <- c(rep(1, nrow(species.coords)), rep(0, nrow(bg)))
  # Extract the bioclimatic data for the presence and background points
  envtrain <- terra::extract(bio.data, train)
  envtrain <- data.frame(cbind(pa = pb_train, envtrain))
  # And for each set separately
  testpres <- data.frame(terra::extract(bio.data, species.coords))
  testbackg <- data.frame(terra::extract(bio.data, bg))
  
  # Saves the variables needed for the gm model as a list to be used later
  return(list(envtrain = envtrain, 
              testpres = testpres, 
              testbackg = testbackg, 
              bio.data = bio.data, 
              species.coords = species.coords,
              e = e,
              train = train))
}
```

```{r}
#| label: evaluateModelFuction
#| output: false

#' Evaluate general linear models function
#' 
#' For every general linear model formula in a list, runs the general linear 
#' model assuming binomial errors, extracts the AIC and AUC values, and saves
#' the results in a dataframe. 
#' 
#' @param modelList # A list of names and formulae to be tested in the glm
#' @param envtrain # The data to run the models on 
#' @param testpres # The bioclimatic data for only the presence points
#' @param testbackg # the bioclimatic data for only the background points 
#' 
#' @return A dataframe containing the model names, their AUC and AIC values 
#' 
#' @examples
#' evaluateModel(modelList = list1,
#'               envtrain = atelopusPrep$envtrain,
#'               testpres = atelopusPrep$testpres,
#'               testbackg = atelopusPrep$testbackg)

evaluateModel <- function(modelList, envtrain, testpres, testbackg) {
  
  # Set up data frame to store the results in 
  results <- data.frame(Model = character(), 
                        AUC = numeric(), 
                        AIC = numeric(), 
                        stringsAsFactors = FALSE)
  
  # Set up the for loop, repeats for each model in the list 
  for (name in names(modelList)) {
    # Create the model
    model <- glm(modelList[[name]], family = binomial(link = "logit"), data = envtrain)
    # Evaluate model
    eval <- evaluate(testpres, testbackg, model)
    # Extract the model's AUC
    auc <- eval@auc
    # Extract the model's AIC
    aic <- AIC(model)
    # Store the AUC and AIC in the results dataframe
    results <- rbind(results, data.frame(Model = name, AUC = auc, AIC = aic))
  }
  
  # Output the results
  return(results)
}

```

```{r}
#| label: plotModelFunction 

#' Plotting GLM results function
#' 
#' Plots the GLM probability of occurance and the predicted presence/absence 
#' locations for a species
#' 
#' @param formula The chosen GLM formula
#' @param bio.data Bioclimatic data from worldclim database in raster format
#' @param species.coords The lat and lon coords of the species presence data
#' @param envtrain The data to run the model on 
#' @param testpres The bioclimatic data for only the presence points
#' @param testbackg The bioclimatic data for only the background points
#' @param e Study extent, previously defined based on species occurrence data
#' 
#' @return Two plots: One of the GLM probability of species occurance, the
#' other of the predicted presence/absence locations for the species
#' 
#' @examples 
#' plottingModel(formula = pa ~ bio1 + bio2 + bio3 + bio4 + bio9,
#'               bio.data = atelopusPrep$bio.data,
#'               species.coords = atelopusPrep$species.coords,
#'               envtrain = atelopusPrep$envtrain,
#'               testpres = atelopusPrep$testpres,
#'               testbackg = atelopusPrep$testbackg,
#'               e = atelopusPrep$e)

plottingModel <- function(formula, bio.data, species.coords, envtrain, testpres, testbackg, e){
  # Model 
  gm <- glm(formula,
            family = binomial(link = "logit"), 
            data = envtrain)
  
  # Predict pg, a raster layer representing the probability of occurrence from
  # the linear model for area of extent e
  pg <- predict(bio.data, gm, ext = e, type = "response")
  pg <- crop(pg, e)
  
  # Set up so the plots will go side by side
  par(mfrow = c(2,1))
  
  # Plot this probability layer
  print(plot(pg, main = "GLM probability of occurrence"))
  # Add country boundaries
  print(plot(wrld_simpl, add = TRUE, border = "dark grey"))
  # Add our observed locality data
  print(points(species.coords, col = "red", pch = 20, cex = 0.75))
  
  # Evaluates how well the model predicts presence/absence at each point
  ge <- evaluate(testpres, testbackg, gm)
  print(ge)
  
  # Picks a threshold probability for defining presence/absence
  tr <- threshold(ge, "prevalence")
  # Plots all areas with a probability greater than the threshold 
  print(plot(pg > tr, main = "Predicted species presence/absence"))
  # Adds the world map
  print(plot(wrld_simpl, add = TRUE, border = "dark grey"))
  # Adds the species coords in red
  print(points(species.coords, col = "red", pch = 20, cex = 0.75))
}
```

```{r}
#| label: prepDataSpecies1
#| output: false

# Runs the prepData function on the first species, Megarhyssa macrura 
species1Prep <- prepData(
  genus = "megarhyssa",
  species = "macrura ",
  rawFilename = "megarhyssa.gbif.rds",
  processedFilename = "megarhyssa.csv" 
)
```

```{r}
#| label: initialModels1

# Sets up each bioclimatic variable alone as an initial list of models to test
initialList1 <- list("gm1" = pa ~ bio1, 
                    "gm2" = pa ~ bio2,
                    "gm3" = pa ~ bio3,
                    "gm4" = pa ~ bio4,
                    "gm5" = pa ~ bio5, 
                    "gm6" = pa ~ bio6,
                    "gm7" = pa ~ bio7,
                    "gm8" = pa ~ bio8,
                    "gm9" = pa ~ bio9,
                    "gm10" = pa ~ bio10,
                    "gm11" = pa ~ bio11, 
                    "gm12" = pa ~ bio12,
                    "gm13" = pa ~ bio13,
                    "gm14" = pa ~ bio14,
                    "gm15" = pa ~ bio15, 
                    "gm16" = pa ~ bio16,
                    "gm17" = pa ~ bio17,
                    "gm18" = pa ~ bio18,
                    "gm19" = pa ~ bio19
                    )

# Runs the evaluateModel function using data saved in the prepData function
initialModels1 <- evaluateModel(modelList = initialList1,
                               envtrain = species1Prep$envtrain,
                               testpres = species1Prep$testpres,
                               testbackg = species1Prep$testbackg)

# Outputs the AUC and AIC for each model in a kable table
initialModels1 %>%
  kbl() %>%
  kable_styling(full_width = FALSE, position = "center")

# Runs a glm on every bioclimatic variable to evaluate which are significant 
initialTest1 <- glm(pa ~ bio1 + bio2 + bio3 + bio4 + bio5 + bio6 + bio7 + bio8 + bio9 + bio10 + bio11 + bio12 + bio13 + bio14 + bio15 + bio16 + bio17 + bio18 + bio19,
    family = binomial(link = "logit"), 
    data = species1Prep$envtrain)

# Outputs the results of the glm
summary(initialTest1)
```

```{r}
#| label: refinedModels1

# Sets up a second list of models to test based on the results of the initial list
refinedList1 <- list(
  # All variables 
  "gm20"  = pa ~ bio1 + bio2 + bio3 + bio4 + bio5 + bio6 + bio7 + bio8 + bio9 + bio10 + bio11 + bio12   + bio13 + bio14 + bio15 + bio16 + bio17 + bio18 + bio19,
  # Variables with *** significance
  "gm21"  = pa ~ bio1 + bio3 + bio15, 
  # Variables with ** significance
  "gm22" = pa ~ bio1 + bio2 + bio3 + bio14 + bio15 + bio16 + bio17 + bio18 + bio19,
  # Top 10 high AUC low AIC
  "gm23" = pa ~ bio1 + bio2 + bio8 + bio10 + bio12 + bio14 + bio15 + bio17 + bio18 + bio19,
  # Top 5 high AUC low AIC
  "gm24" = pa ~ bio12 + bio14 + bio15 + bio17 + bio19,
  # Variables with *** significance and top 5 high AUC low AIC
  "gm25" = pa ~ bio1 + bio3 + bio12 + bio14 + bio15 + bio17 + bio19,
  # gm22 with fewer precipitation variables
  "gm26" = pa ~ bio1 + bio2 + bio3 + bio14 + bio15 + bio16 + bio17)
 

# Runs the evaluateModel function using data saved in the prepData function
refinedModels1 <- evaluateModel(modelList = refinedList1,
                               envtrain = species1Prep$envtrain,
                               testpres = species1Prep$testpres,
                               testbackg = species1Prep$testbackg)

# Outputs the AUC and AIC for each model in a kable table
refinedModels1 %>%
  kbl() %>%
  kable_styling(full_width = FALSE, position = "center")
```

```{r}
#| label: plotSpecies1
#| results: "hide"
#| fig-width: 8
#| fig-height: 12
#| fig-cap: "Predicted occurance of Megarhyssa macrura based on the general linear model."

# Runs the plottingModel function for species 1
plottingModel(formula = pa ~ bio1 + bio2 + bio3 + bio14 + bio15 + bio16 + bio17 + bio18 + bio19,
              bio.data = species1Prep$bio.data,
              species.coords = species1Prep$species.coords,
              envtrain = species1Prep$envtrain,
              testpres = species1Prep$testpres,
              testbackg = species1Prep$testbackg,
              e = species1Prep$e)
```

The climatic variables that best describe *Megarhyssa macura* distribution were determined in two stages. First, every climatic variable was examined, looking for high AUC and low AIC and significance. Several models were then tested, including all variables, variables with high AUC and low AIC, and variables with high significance. Gm25 combined variables with high AUC and high significance due to the similarities in AUC and AIC between gm22 and gm23. The model with the highest AUC and lowest AIC included all of the bioclimatic variables. However, to avoid overfitting the model to the dataset, the next best model was used, gm22, including 9 variables. Annual mean temperature, mean diurnal range, isothermality, precipitation seasonality and precipitation of the driest month, wettest quarter, driest quarter, warmest quarter and coldest quarter. gm26 removed some of the precipitation factors from gm22, but this decreased AUC and increased AIC.

#### Question 2 - Species 2 Distribution Modelling

**Run linear models to predict the present-day distribution of species 2 using climate variables and use them to present a map of its current distribution. Which set of climatic variables best explain the current distribution of the species?**

```{r}
#| label: prepDataSpecies2
#| output: false

species2Prep <- prepData(
  genus = "tremex",
  species = "columba",
  rawFilename = "tremex.gbif.rds",
  processedFilename = "tremex.csv" 
)
```

```{r}
#| label: initialModels2

# Sets up each bioclimatic variable alone as an initial list of models to test
initialList2 <- list("gm1" = pa ~ bio1, 
                    "gm2" = pa ~ bio2,
                    "gm3" = pa ~ bio3,
                    "gm4" = pa ~ bio4,
                    "gm5" = pa ~ bio5, 
                    "gm6" = pa ~ bio6,
                    "gm7" = pa ~ bio7,
                    "gm8" = pa ~ bio8,
                    "gm9" = pa ~ bio9,
                    "gm10" = pa ~ bio10,
                    "gm11" = pa ~ bio11, 
                    "gm12" = pa ~ bio12,
                    "gm13" = pa ~ bio13,
                    "gm14" = pa ~ bio14,
                    "gm15" = pa ~ bio15, 
                    "gm16" = pa ~ bio16,
                    "gm17" = pa ~ bio17,
                    "gm18" = pa ~ bio18,
                    "gm19" = pa ~ bio19
                    )

# Runs the evaluateModel function using data saved in the prepData function
initialModels2 <- evaluateModel(modelList = initialList2,
                               envtrain = species2Prep$envtrain,
                               testpres = species2Prep$testpres,
                               testbackg = species2Prep$testbackg)

# Outputs the AUC and AIC for each model in a kable table
initialModels2 %>%
  kbl() %>%
  kable_styling(full_width = FALSE, position = "center")

# Runs a glm on every bioclimatic variable to evaluate which are significant 
initialTest2 <- glm(pa ~ bio1 + bio2 + bio3 + bio4 + bio5 + bio6 + bio7 + bio8 + bio9 + bio10 + bio11 + bio12 + bio13 + bio14 + bio15 + bio16 + bio17 + bio18 + bio19,
    family = binomial(link = "logit"), 
    data = species2Prep$envtrain)

# Outputs the results of the glm
summary(initialTest2)
```

```{r}
#| label: refinedModels2

# Sets up a second list of models to test based on the results of the initial list
refinedList2 <- list(
  # All climatic variables
  "gm20" = pa ~ bio1 + bio2 + bio3 + bio4 + bio5 + bio6 + bio7 + bio8 + bio9 + bio10 + bio11 + bio12   + bio13 + bio14 + bio15 + bio16 + bio17 + bio18 + bio19,
  # Variables with *** significance 
  "gm21" = pa ~ bio1 + bio3 + bio9, 
  # Variables with any significance
  "gm22" = pa ~ bio1 + bio2 + bio3 + bio5 + bio6 + bio7 + bio9, 
  # Top 5 high AUC low AIC
  "gm23" = pa ~ bio12 + bio14 + bio15 + bio17 + bio19,
  # Top 10 high AUC low AIC
  "gm24" = pa ~ bio1 + bio2 + bio3 + bio10 + bio12 + bio14 + bio15 + bio17 + bio18 + bio19)


# Runs the evaluateModel function using data saved in the prepData function
refinedModels2 <- evaluateModel(modelList = refinedList2,
                               envtrain = species2Prep$envtrain,
                               testpres = species2Prep$testpres,
                               testbackg = species2Prep$testbackg)

# Outputs the AUC and AIC for each model in a kable table
refinedModels2 %>%
  kbl() %>%
  kable_styling(full_width = FALSE, position = "center")
```

```{r}
#| label: plotSpecies2
#| results: "hide"
#| fig-width: 8
#| fig-height: 12
#| fig-cap: "Predicted occurance of Tremex columba based on the general linear model."

plottingModel(formula = pa ~ bio1 + bio2 + bio3 + bio5 + bio6 + bio7 + bio9,
              bio.data = species2Prep$bio.data,
              species.coords = species2Prep$species.coords,
              envtrain = species2Prep$envtrain,
              testpres = species2Prep$testpres,
              testbackg = species2Prep$testbackg,
              e = species2Prep$e)
```

The same process was used to determine the climatic values that best describe species 2, Tremex columba, as were used to describe Megarhyssa macura. First, every climatic variable was tested, allowing for the selection of variables with high AUC, low AIC and high significance to be taken forward. Multiple models were then tested using these variables. The model with the highest AUC and lowest AIC was gm20, which used all variables. To avoid overfitting the data, the next best model, gm22, was used. The variables which were included in this model and are used to predict the distribution of the species are annual mean temperature, mean diurnal range, isothermality, max temperature of warmest month, min temperature of coldest month, temperature annual range and mean temperature of driest quarter. Of note is that these variables are mostly associated with temperature, whilst those of M. macura are more focussed on precipitation.

#### Question 3 - Distribution Overlap

**Plot the overlap in distribution of the two species. Devise and calculate a metric for the degree of overlap between their ranges, explaining how you calculated it.**

```{r}
#| label: distributionOverlap
#| fig-cap: "Plot of the predicted current species distributions of Megarhyssa macrura, Tremex columba and their overlap, based on glm models including climatic variables."

### First species ###

# Runs the linear model
gm1 <- glm(pa ~ bio1 + bio2 + bio3 + bio14 + bio15 + bio16 + bio17 + bio18 + bio19,
          family = binomial(link = "logit"), 
          data = species1Prep$envtrain)

# Predict pg, a raster layer representing the probability of occurrence 
# from the linear model for area of extent e
pg1 <- predict(species1Prep$bio.data, 
               gm1, 
               ext = species1Prep$e, 
               type = "response")

# Crop pg to e
pg1 <- crop(pg1, species1Prep$e)

# Evaluates how well the model predicts presence/absence at each point
ge1 <- evaluate(species1Prep$testpres, species1Prep$testbackg, gm1)

# This evaluation picks a threshold probability for defining presence/absence
tr1 <- threshold(ge1, "prevalence")

# Saves where the model predicts the species to be present
presence1 <- pg1 > tr1
presence1 <- mask(presence1, presence1, maskvalue = FALSE)


### Second species ###

# Runs the linear model 
gm2 <- glm(formula = pa ~ bio1 + bio2 + bio3 + bio5 + bio6 + bio7 + bio9,
           family = binomial(link = "logit"), 
           data = species2Prep$envtrain)

# Predict pg, a raster layer representing the probability of occurance 
# from the linear model for area of extent e. The e of species 1 is used
# so both are cropped to the same area
pg2 <- predict(species2Prep$bio.data, 
               gm2, 
               ext = species1Prep$e, 
               type = "response")

# Crop pg to e
pg2 <- crop(pg2, species1Prep$e)

# Evaluates how well the model predicts presence/absence at each point
ge2 <- evaluate(species2Prep$testpres, species2Prep$testbackg, gm2)

# This evaluation picks a threshold probability for defining presence/absence
tr2 <- threshold(ge2, "prevalence")

# Saves where the model predicts the species to be present
presence2 <- pg2 > tr2
presence2 <- mask(presence2, presence2, maskvalue = FALSE)


### Overlap ###

# Identify areas where both species are predicted to be present
overlap <- presence1 & presence2

# Using the mask function to change FALSE values in the spatraster to NA
overlap <- mask(overlap, overlap, maskvalue = FALSE)


### Area calculations ###

# Calculates the area of the predicted distribution of species 1
area1 <- expanse(presence1, unit = "km")
# Calculates the area of the predicted distribution of species 1
area2 <- expanse(presence2, unit = "km")
# Calculates the area of the predicted overlap of species 1 and species 2
areaOverlap <- expanse(overlap, unit = "km")

# Calculates the overlap metric 
overlapMetric = areaOverlap$area / ((area1$area + area2$area) - areaOverlap$area)

# Stores the areas and overlap metric in a dataframe 
overlapResults <- data.frame(
  Species_1_Area = area1$area,
  Species_2_Area = area2$area,
  Overlap_Area = areaOverlap$area,
  Overlap_Metric = overlapMetric
)

# Outputs the dataframe as a table 
overlapResults %>%
  kbl() %>%
  kable_styling(full_width = FALSE, position = "center")


### Plotting ###

# Converting the world map to vector format 
wrld_simpl_vect <- vect(wrld_simpl) 
# Ensuring the world map is cropped to the same as the species distributions 
wrld_simpl_vect <- crop(wrld_simpl_vect, presence1) 

# Plotting the two predicted species distributions, and the predicted overlap
plot(presence1, col = "#88CCEE", main = "Predicted Species Distribution Overlap",legend = FALSE)
plot(presence2, col = "#CC6677", add = TRUE, legend = FALSE)
plot(overlap, col = "#332288", add = TRUE, legend = FALSE)
plot(wrld_simpl_vect, add = TRUE, border = "dark grey")
legend(x = -76.2, # Set legend x location 
       y = 28, # Set legend y location 
       # Set legend values
       legend = c("Megarhyssa macrura", "Tremex columba", "Overlap"),
       # Set legend colours
       fill = c("#88CCEE", "#CC6677", "#332288"),
       border = "black", # Add border to the legend
       cex = 0.7) # Change the size of the legend 
```

Two SpatRasters, presence1 and presence2, are set up to show the predicted areas each species is present in. These are used to create a third spatraster, showing the species overlap. The areas are then extracted from these, and used to create the overlap metric, the formulae for which is: $$
overlap\space metric = \frac {overlap\space area}{species\space 1\space area\space + species\space 1\space area\space - overlap\space area}
$$

This is also represented visually, through a plot showing the predicted distribution of the two species, and the predicted overlap. This was created using a colour blind friendly colour palette from the cols4all package, ensuring the graph is accessible to individuals with deuteranomia, protanopia and tritanopia [@Tennekes2023].

#### Question 4 - Interspecies Distribution Dependence

**Use a linear model to test whether the distribution of species 1 at the present time depends on the distribution of species 2, while also taking account of the effects of climatic variables.**

```{r}
#| label: interspeciesDistributionDependence

# Extracting the probability of the presence of species 2 at each of 
# species 1's coordinates
species2Probability <- terra::extract(pg2, species1Prep$train)

# Attaching the probability of species 2 presence to the data used to to model
# species 1
species1Model <- species1Prep$envtrain %>% 
  merge(species2Probability) %>% 
  rename("species2" = "lyr1") %>% 
  mutate(species2 = scale(species2))
  
# Run the linear model 
gm3 <- glm(pa ~ species2 + bio1 + bio2 + bio3 + bio14 + bio15 + bio16 + bio17 + bio18 + bio19,
           family = binomial(link = "logit"), 
           data = species1Model)

# Output the results of the linear model
summary(gm3)

```

As the coordinates of the *M. macrura* and *T. columba* observations don't match up exactly, whether or not *T. columba* is present at each observation of *M. macrura* must be made based on the presence and absence predictions for *T. columba* made in question 1. This gives the probability that *T. columba* is present at each observation of *M. macrura.* Then, using an adaptation of the linear model for *M. macrura* determined in question 1, including the probability of species 2 presence, the interspecies distribution dependence is tested.

The results of the linear model are significant, with a p value \< 0.001. This suggests that the distribution of *M. macrura* depends on the distribution of *T. columba*. This result is to be expected, as *M. macrura* is a parasitoid of *T. columba*, oviposititioning it's eggs into *T. columba* larvae.

#### Question 5 - Future Distribution Prediction

**Predict the future distribution of each species using CMIP6 data for future climate and predict how the degree of overlap in ranges change will change in that time. Do you expect the two species to co-occur more often or less often than at the present?**

```{r}
#| label: futureDistributionPrediction
#| fig-cap: "Plot of the predicted species distributions of Megarhyssa macrura, Tremex columba and their overlap in 2061 to 2080 Predictions based on glm models including climatic variables."

# Download the CMIP6 data for 2061 to 2080
future.bio.data <- cmip6_world(
  model = "CanESM5",
  var = "bio", 
  ssp = "245",
  res = 10,
  time = "2061-2080",
  path = here("data", "raw")
)

# Sets the column names to match those of bio.data
names(future.bio.data) <- names(species1Prep$bio.data)

# Crop future climate data to region of interest for efficiency
future.bio.data <- crop(future.bio.data, species1Prep$e)


### Species 1 

# Calculate predictions for present and future
pg1Future <- predict(future.bio.data, gm1, ext =  species1Prep$e, type = "response")
pg1Future <- crop(pg1Future,  species1Prep$e)

# Saves where the model predicts the species to be present in the future
futurePresence1 <- pg1Future > tr1
futurePresence1 <- mask(futurePresence1, futurePresence1, maskvalue = FALSE)


### Species 2 

# Calculate predictions for present and future
pg2Future <- predict(future.bio.data, gm2, ext =  species1Prep$e, type = "response")
pg2Future <- crop(pg2Future,  species1Prep$e)

# Saves where the model predicts the species to be present in the future
futurePresence2 <- pg2Future > tr2
futurePresence2 <- mask(futurePresence2, futurePresence2, maskvalue = FALSE)


### Overlap 

# Identify areas where both species are predicted to be present
futureOverlap <- futurePresence1 & futurePresence2

# Using the mask function to change FALSE values in the spatraster to NA
futureOverlap <- mask(futureOverlap, futureOverlap, maskvalue = FALSE)


### Area calculations 

# Calculates the area of the predicted future distribution of species 1
futureArea1 <- expanse(futurePresence1, unit = "km")
# Calculates the area of the predicted future distribution of species 2
futureArea2 <- expanse(futurePresence2, unit = "km")
# Calculates the area of the predicted future overlap of species 1 and species 2
futureAreaOverlap <- expanse(futureOverlap, unit = "km")

# Calculates the overlap metric 
futureOverlapMetric = futureAreaOverlap$area / ((futureArea1$area + futureArea2$area) - futureAreaOverlap$area)

# Stores the areas and overlap metric in a dataframe 
futureResults <- data.frame(
  Species_1_Area = futureArea1$area,
  Species_2_Area = futureArea2$area,
  Overlap_Area = futureAreaOverlap$area,
  Overlap_Metric = futureOverlapMetric)

# Combines the future results dataframe with the current results dataframe for easier comparison
fullResults <- overlapResults %>% 
  bind_rows(futureResults) %>%  # Binds the two dataframes
  mutate(Data = c("Present", "Future")) %>% # Adds a column to explain the datasets
  relocate(Data, .before = Species_1_Area) # Moves the new column to the left 

# Outputs the results as a table
fullResults %>%
  kbl() %>%
  kable_styling(full_width = FALSE, position = "center")


### Plotting 

# Plotting the two predicted species distributions, and the predicted overlap
plot(futurePresence1, col = "#88CCEE", main = "Predicted species Distribution Overlap, 2061-2080", legend = FALSE)
plot(futurePresence2, col = "#CC6677", add = TRUE, legend = FALSE)
plot(futureOverlap, col = "#332288", add = TRUE, legend = FALSE)
plot(wrld_simpl_vect, add = TRUE, border = "dark grey")
legend(x = -76.2, # Set legend x location 
       y = 28, # Set legend y location 
       # Set legend values
       legend = c("Megarhyssa macrura", "Tremex columba", "Overlap"),
       # Set legend colours
       fill = c("#88CCEE", "#CC6677", "#332288"),
       border = "black", # Add border to the legend
       cex = 0.7) # Change the size of the legend 

```

In order to predict the species distributions in
